package com.eomcs.basic.ex04;

import java.sql.Date;

//# 변수의 종류
//- 자바 원시 타입의 값을 저장하는 변수와 메모리 주소를 저장하는 변수가 있다.
//- 자바 원시 타입 변수(primitive variable)
//    정수, 부동소수점, 논리, 문자코드의 값을
//- 레퍼런스 변수(referece variable)
//    자바 원시 타입의 값을 제외한 모든 값
//
public class Exam0400 {
  public static void main(String[] args) {
    //자바 원시 데이터 타입 변수
    //- 정수
    byte b;  // 1바이트 크기의 메모리
    short s; // 2바이트 크기의 메모리 
    int i;   // 4바이트 크기의 메모리 
    long l;  // 8바이트 크기의 메모리
    
    //- 부동소수
    float f;   // 4바이트 크기의 메모리
    double d;  // 8바이트 크기의 메모리
    
    //- 문자코드
    char c;  // 2바이트 크기의 메모리
    
    //- 논리
    boolean bool;  // 자바 언어 명세서에는 메모리의 크기가 정의되어 있지 않다. 다만 JVM 명세서에는 int 로 다룬다고 나와있다.
    
    //레퍼런스 변수
    String str; // 자바 언어 명세서에는 메모리의 크기가 정의되어 있지 않다. 메모리 주소를 저장할 만큼 큰 크기
    Date date;  // 자바 언어 명세서에는 메모리의 크기가 정의되어 있지 않다. 메모리 주소를 저장할 만큼 큰 크기
  
    //-변수의 메모리 크기
    //정수 리터럴은 기본이 4byte이다.
    //원래 작은 메모리에 저장할 수 없지만, 
    //오른쪽 값이 리터럴일 경우 메모리에 그 리터럴을 저장할 수 있다면 허락한다.
    //8byte 해당안된다.
    b = -128;
    b = 127;
    // 00000000 00000000 00000000 10000001 (129)
    // 11111111 11111111 11111111 01111111 (-129)
    // b = -129; 초과-컴파일 에러!
    // b = 128; 초과-컴파일 에러!
    
    //(4byte)리터럴끼리의 연산 결과는 리터럴로 취급한다.
    b = 20*3;
    b = 120+7;
    // b = 120+8;, 초과-컴파일 에러!
    
    byte b2 = 20;
    //b = 100 + b2; 컴파일 에러! 
    //리터럴과 리터럴의 연산 결과는 리터럴로 취급하지만, 리터럴과 리터럴과의 연산이 아님.
    
    s = -32768;
    s = 32767;
    //s = -32769; 컴파일 에러!
    //s = 32768; 컴파일 에러!
    
    i = -21_0000_0000;
    i = 21_0000_0000;
    //i = -22_0000_0000; 컴파일 에러!
    //i = 22_0000_0000; 컴파일 에러!
    
    l = -922_0000_0000_0000_0000L;
    l = 922_0000_0000_0000_0000L;
    //l = -932_0000_0000_0000_0000L; 컴파일 에러!
    //l = 932_0000_0000_0000_0000L; 컴파일 에러!
    
    byte b3;
    b3 = b;
    //b3 = s; 에러
    //b3 = i; 에러
    //b3 = l; 에러
    
    short s2;
    //s2 = b; 에러
    //s2 = s; 에러
    //s2 = i; 에러
    //s2 = l; 에러
    
    int i2;
    i2 = b;
    i2 = s;
    i2 = i;
    // i2 = l; 에러
    
    long l2;
    l2 = b;
    l2 = s;
    l2 = i;
    l2 = l;
    
    s = -32768;
    s = 32767;
    char c2;
    //c2 = -32768; 에러 - char는 음수 불가(0~65535)
    c2 = 0;
    c2 = 65535;
    //c2 = s; 에러
    //s = c2; 에러
    
    //부동소수점은 7자리의 숫자만 유효한다.
    //그 이상의 자릿수인 경우 값이 잘리거나 혹은 반올림된다.
    //[주의] 유효자릿수를 넘어간다고 오류가 발생하진 않는다.
    f = 999.9999f;
    f = 9.999999f;
    f = 99999.9f;
    f = 999.99993f;
    System.out.println(f); // 999.9994
    
    System.out.println("----------------");
    float f1 = 1.234567f;
    float f2 = 92345.22f;
    System.out.println(f1);
    System.out.println(f2);
    float f3 = f1 + f2 ; // 92346.454567 => float + float = float
    double dx = f1 + f2 ; 
    System.out.println(f3); // 92346.45
    System.out.println(dx); // 912346.45xx

    //두 부동소수점을 연산한 결과가
    //7자리를 넘어 갈 것 같으면 처음부터 double을 사용하자.
    System.out.println("----------------");
    double d1 = 1.234567;
    double d2 = 92345.22;
    System.out.println(d1);
    System.out.println(d2);
    double d3 = d1 + d2 ; // 92345.454567
    System.out.println(d3); // 92346.45456700001
    System.out.println("----------------");

    d = 799999299.99999997;
    System.out.println(d); // 7.999993E8
    // 8byte 유효자리 15자리 (16자리도 될 경우 90%)
    
    //f = 2345678912.123456;//8byte부동소수점, 4byte메모리 이므로 에러 !
    f = 2345678912.123456f; //4byte값을 저장
    //2.34567885E9 
      //8byte값을 4byte값으로 만듦.
      //4byte를 넘어가는 값은 자른다.
      //따라서 f에 들어가는 값은 이미 잘린값이다.
    System.out.println(f);
    
    d =  234.5678; 
    System.out.println(d);
    
    f =  234.5678f;
    System.out.println(f);
    
    d =  234.5678f;
    System.out.println(d);
    
    d = f;
    System.out.println(d);
  }
}

// 메모리 크기에 따라 저장할 수 있는 값의 범위
// 1) primitive data type (원시 데이터 타입)
// - 정수
//   - byte   : 1byte 메모리 (-128 ~ 127)
//   - short  : 2byte 메모리 (-32768 ~ 32767)
//   - int    : 4byte 메모리 (약 -21억 ~ 21억)
//   - long   : 8byte 메모리 (약 -922경 ~ 922경)
// - 부동소수점
//   - float  : 4byte 메모리 (유효자릿수 7자리)
//   - double : 8byte 메모리 (유효자릿수 15자리)
// - 문자
//   - char   : 2byte 메모리 (0 ~ 65535). UCS-2 코드 값 저장.
// - 논리값
//   - boolean : JVM에서 4 바이트 int 메모리를 사용한다.
//               배열일 경우 1 바이트 byte 메모리를 사용한다.
//
// 2) reference(레퍼런스)
//    데이터가 저장된 메모리의 주소를 저장하는 메모리.
// - 문자열(주소)
//   - String : 문자열이 저장된 메모리의 주소를 저장한다.
//              프로그래밍 입문 단계에서는 그냥 문자열을 저장하는 메모리로 생각하라!
// - 날짜(주소)
//   - Date : 날짜 값이 저장된 메모리의 주소를 저장한다.
//            프로그래밍 입문 단계에서는 그냥 날짜를 저장하는 메모리로 생각하라!
// - 레퍼런스에 대한 자세한 사항은 추후에 자세히 설명할 것이다.
